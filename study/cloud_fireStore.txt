# Cloud FireStore란? (데이터 모델)
    https://firebase.google.com/docs/firestore/data-model?hl=ko
    문서 중심의 NoSQL 데이터베이스
    * NoSQL : Not Only SQL(Structured Query Language)
        https://www.samsungsds.com/kr/insights/1232564_4627.html
        기존 관계형 DBMS 특성 + 부가적 특성 지원
         a. 보다 융통성 있는 데이터 모델 사용
         b. 데이터 저장 및 검색을 위한 특화된 매커니즘 제공
         => 단순 검색 및 추가 작업에 최적화된 키 저장 기법 사용, 응답 속도 및 처리 효율 등의 성능이 뛰어남

        NoSQL vs. SQL
            a. 관계형 모델 사용 X, 테이블 간 조인 기능 X
            b. 직접 프로그래밍이 가능한 비SQL 인터페이스를 통한 db
            c. 여러 대의 db 서버를 클러스터링해 하나의 db 구성
            d. 관계형 데이터베이스에서 지원하는 data 처리 완결성 (transaction ACID 지원) 미보장
            e. 데이터의 스키마와 속성들을 다양하게 수용 및 동적 정의 (Schema-less)
            f. 데이터베이스의 중단 없는 서비스와 자동 복구 기능 지원
            g. 다수가 Open Source로 제공
            h. 확장성, 가용성, 높은 성능
        => 초고용량 데이터 처리 등 성능에 특화된 목적을 위해, 비관계형 데이터 저장소에, 비구조적인 데이터를 저장하기 위한 분산 저장 시스템

    Cloud FireStore는 테이블이나 행이 없으며, 컬렉션으로 정리되는 문서에 데이터를 저장.

    각 문서에는 키-값의 쌍이 들어있음. Cloud Firestore는 작은 문서로 이루어진 대규모 컬렉션을 저장하는데 최적화되어 있음

    모든 문서는 컬렉션에 저장되어야 함
    ## 구조
        문서
            하위 컬렉션
                문자열 같은 기본 필드 
                목록 같은 복합 객체
            중첩된 객체
                문자열과 같은 기본 필드
                목록 같은 복합 객체
    사용자는 컬렉션 내 문서에 데이터를 할당하기만 하면 됨

    ## 저장 단위 : 문서 
        - 값에 맴핃뇌는 필드를 포함하는 간단한 레코드, 이름으로 식별됨
        - 타입 : boolean, 문자열, 지리 좌표, 바이너리 BLOB, 타임스탬프 등 다양한 데이터 유형 지원. 배열, 맵이라고 하는 중첩된  객체를 사용해 문서 내 데이터 구조화도 가능
        - 맵 : 문서의 복잡합 중첩된 객체. JSON과 유사
               추가적 데이터 유형 지원, 크기는 1MB로 제한됨
    
    ## 컬렉션 : 문서의 컨테이너로 문서만 포함
        ex) users (컬렉션)
             - alovelace (문서)
                first: "Ada"
                last: "Lovelace"
                born: 1815
            - aturing (문서)
                first: "Alan"
                last: "Turing"
                born: "1912"
        스키마를 사용하지 않으므로 각 문서에 어떤 필드를 넣을지, 각 필드에 어떤 유형의 데이터를 저장할지는 완전히 사용자의 재량

    ## 참조 : 데이터베이스의 특정 위치를 가리키는 간단한 객체
        참조를 만들어도 네크워크 작업이 수행되진 않음

    ## 계층적 데이터
        ### 하위 컬렉션 : 특정 문서와 관련된 컬렉션
            컬렉션 그룹 쿼리를 사용하면 컬렉션 ID가 동일한 하위 컬렉션을 전체를 쿼리할 수 있음

            컬렉션과 문서는 항상 이 패턴을 따라야함
            (컬렉션, 문서, 문서의 하위 컬렉션, 하위 컬렉션의 문서)

# 지원되는 데이터 유형
    필요할 때 찾아서 작성할 것

# SDK 및 클라이언트 라이브러리

# 색인 유형

# 데이터베이스 위치

# 데이터 번들